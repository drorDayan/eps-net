import math
import yaml
import matplotlib.pyplot as plt
from termcolor import colored

eps = 99999999999
delta = 0.1


def cords_to_2d_points(cords_x, cords_y):
    res = [[x, y] for x in cords_x for y in cords_y]
    return res


def create_fig():
    opt_eps_s = ["$\\infty$", "50", "25", "20", "15", "10", "5", "2.5", "2", "1.5", "1", "0.75"]
    opt_my_res = [1.3742365549272302, 1.3694792029817147, 1.373279226253925, 1.372239349313844,
           1.3683743542186004, 1.3721165441830794, 1.3674488423712654, 1.3633612251566565, 1.3666904755831202,
           1.3017236723780092, 1.30034735466921, 1.2972315620259303]
    opt_opt_res = 1.301
    opt_my_res = [a/opt_opt_res for a in opt_my_res]

    # removed 3 which had res=7.200823126702309 and annotation "1578"
    spiral_eps_s = ["50", "25", "20", "15", "10", "5", "2.5", "2", "1.5", "1", "0.75"]
    spiral_my_res = [7.225211037399447, 7.259783588110346, 7.300494096342531, 7.283739359697042, 7.231285615510996,
                     7.191497727661158, 7.188265871974338, 7.098752845485672, 6.814532142977471, 6.784470805676023,
                     6.733991402604547]
    spiral_opt_res = 3.740546513846127 + 3.7799108897216573
    spiral_my_res = [a/spiral_opt_res for a in spiral_my_res]

    multi_eps_s = ["50", "25", "10", "5"]
    multi_my_res = [6.513, 6.55722, 6.5033, 6.37237]
    multi_opt_res = 6.108
    multi_my_res = [a/multi_opt_res for a in multi_my_res]

    four_robots_eps_s = ["$\\infty$", "50", "25", "20", "15", "10", "5"]
    four_robots_res = [1.8890418499334294, 1.8672344416943385, 1.8868707681429016, 1.8645540793738917,
                       1.8659432249504144, 1.8649922403453612, 1.8495532987605832]
    four_robots_opt_res = 1.77715
    four_robots_my_res = [a/four_robots_opt_res for a in four_robots_res]

    # annotations = ["1201", "1301", "1405", "1513", "1625", "2245", "3121",
    #                "3613", "4325", "9941", "14621"]
    # eps_s = [eps_s[i]+"\n"+annotations[i] for i in range(len(eps_s))]
    annotations = ["631", "701", "738", "774", "855", "1169", "1869", "2180", "2971", "4994", "7307"]
    annotations_pos = [(0.105, 0.39), (0.188, 0.413), (0.271, 0.44), (0.358, 0.43), (0.44, 0.395),
                       (0.515, 0.37), (0.595, 0.365), (0.7, 0.305), (0.79, 0.11), (0.87, 0.09), (0.925, 0.015)]

    opt_annotations = ["4905", "5105", "5517", "5729", "6165", "6849", "9389", "15317", "18629", "25317", "41765", "62309"]
    opt_annotations_pos = [(0.015, 0.833), (0.10, 0.861), (0.181, 0.83), (0.265, 0.87), (0.345, 0.858), (0.415, 0.865),
                           (0.513, 0.852), (0.588, 0.84), (0.68, 0.85), (0.75, 0.55), (0.836, 0.544), (0.919, 0.531)]

    four_robots_annotations = ["1577", "1651", "1778", "1860", "1998", "2219", "3040"]
    four_robots_annotations_pos = [(0.015, 0.91), (0.10, 0.805), (0.181, 0.902), (0.265, 0.8), (0.345, 0.803),
                                   (0.42, 0.795), (0.513, 0.755)]

    multi_annotations = ["1215", "1315", "1639", "2259"]
    multi_annotations_pos = [(0.09, 0.93), (0.18, 0.965), (0.44, 0.92), (0.55, 0.8)]

    plt.plot(opt_eps_s, opt_my_res, "g.", label="2-robots: obstacle-free", linestyle="solid")
    plt.plot(spiral_eps_s, spiral_my_res, "m.", label="2-robots: spiral", linestyle="solid")
    plt.plot(four_robots_eps_s, four_robots_my_res, "r.", label="4-robots", linestyle="solid")
    plt.plot(multi_eps_s, multi_my_res, "b.", label="7-robots", linestyle="solid")
    plt.xlabel("Approximation parameter $\\varepsilon$")
    plt.ylabel("cost($\\widehat{\\Sigma}$)/cost(OPT$_\\delta$)")
    plt.title("Approximation of optimal $\\delta$-clear solution as a function of $\\varepsilon$")
    plt.axhline(y=1, color="k", linewidth=0.6, linestyle="--", label="Optimal $\\delta$-clear")
    plt.legend()
    for i, txt in enumerate(annotations):
        plt.annotate(txt, xy=(spiral_eps_s[i], spiral_my_res[i]),
                     textcoords='axes fraction', xytext=(annotations_pos[i]), color="m", fontsize="small")

    for i, txt in enumerate(opt_annotations):
        plt.annotate(txt, xy=(opt_eps_s[i], opt_my_res[i]),
                     textcoords='axes fraction', xytext=(opt_annotations_pos[i]), color="g", fontsize="small")

    for i, txt in enumerate(four_robots_annotations):
        plt.annotate(txt, xy=(four_robots_eps_s[i], four_robots_my_res[i]),
                     textcoords='axes fraction', xytext=(four_robots_annotations_pos[i]), color="r", fontsize="small")

    for i, txt in enumerate(multi_annotations):
        plt.annotate(txt, xy=(multi_eps_s[i], multi_my_res[i]),
                     textcoords='axes fraction', xytext=(multi_annotations_pos[i]), color="b", fontsize="small")

    # plt.show()
    plt.savefig("exp_res.png")#, bbox_inches='tight', pad_inches=0.2)


def opt_rand_vs_sg():
    eps_s = [9999999, 25, 10, 5, 2.5, 1.5, 1]
    eps_net_final_res = [1.3742365549272302, 1.373279226253925, 1.3721165441830794, 1.3674488423712654, 1.3633612251566565, 1.3017236723780092, 1.30034735466921]
    eps_net_final_times = [[60.7377393245697, 87.11717486381531, 122.99854588508606, 217.29760813713074, 646.5592501163483, 171.80708408355713, 662.6035962104797],
                           [63.2929253578186, 88.70199275016785, 125.72626447677612, 220.5289716720581, 647.178297996521, 173.69583988189697, 662.5424246788025],
                           [63.90223503112793, 89.28851747512817, 125.5552499294281, 219.6813051700592, 648.1773061752319, 173.28586149215698, 663.7817313671112]]

    eps_net_avg_valid_times = [0.0 for _ in range(len(eps_net_final_res))]
    for l in eps_net_final_times:
        for i in range(len(l)):
            eps_net_avg_valid_times[i] += l[i]/len(eps_net_final_times)

    no_path = 99999999999
    rand_res = [
        [1.5109648860659861, 1.53510986849, 99999999999, 1.4066578931646943, 1.3405460963436457, 1.3270625479918727, 1.3085868710961375],
        [78.1520254611969, 173.98906660079956, 13504.433089733124, 314.4702591896057, 209.99445986747742, 596.4837501049042, 951.3588228225708],
        [1.5299330220973502, 99999999999, 1.4181950365901177, 1.382901860361044, 1.3651564485707, 1.3177078756750156, 1.301408146304514],
        [117.39732384681702, 7650.561292648315, 109.63950562477112, 211.4622781276703, 883.2858321666718, 452.73159551620483, 600.5243246555328],
        [1.6112443705426163, 1.557966901096969, 1.495311238095206, 1.4015180673818404, 1.3485819960227499, 1.318899810714964, 1.301358801319846],
        [275.7864155769348, 311.25441241264343, 282.18838143348694, 217.95005774497986, 343.90671849250793, 544.6878755092621, 531.8176732063293],
        [1.5105495531131852, 1.5842802911093294, 1.495701797016463, 1.4038734197896343, 1.3540559867449877, 1.3293509830022545, 1.3068640513369658],
        [73.1277539730072, 481.17656898498535, 427.52325892448425, 210.21930646896362, 422.27677297592163, 585.321536064148, 685.4591822624207],
        [1.6239985453055705, 1.4457205430121642, 1.4505504025318123, 1.4101244341350663, 1.3531225432236578, 1.3214490492621638, 1.3034443655988717],
        [213.087064743042, 54.96124839782715, 238.71420907974243, 283.58644437789917, 481.2490611076355, 509.79564452171326, 891.4062440395355],
        [1.5052843449425364, 1.5851293054657396, 1.4493382323453465, 1.398293965641256, 1.3516097976056443, 1.3187187294041172, 1.3011036472196904],
        [109.96934247016907, 194.709951877594, 129.1239356994629, 316.4807999134064, 282.18617153167725, 435.5092260837555, 553.3152341842651],
        [1.5350869572061288, 1.4654751684592657, 1.4412171331292, 1.4086480740330396, 1.3536452273264477, 1.3182853830091745, 1.3040946480249411],
        [213.08398747444153, 120.25995874404907, 161.63460326194763, 287.30380511283875, 311.287100315094, 498.7778322696686, 652.6645858287811],
        [1.6058211099462736, 1.519965501011662, 1.4689388877020753, 1.4314239822343073, 1.343856190655332, 1.3232695243691, 1.3071700824256696],
        [294.83730697631836, 202.2020399570465, 137.633380651474, 590.7230896949768, 265.59653782844543, 373.3257348537445, 743.418178319931],
        [1.5771350822368815, 1.532517660119105, 1.4753259261864662, 1.4300366454888005, 1.3537961735138688, 1.3260987435320608, 1.3027839001278207],
        [239.22445964813232, 167.6970236301422, 435.5092852115631, 420.96746468544006, 508.124018907547, 813.9572095870972, 980.716011762619],
        [99999999999, 99999999999, 1.4855823580254899, 1.3781414050977328, 1.3661087839665702, 1.3222220586761013, 1.3014991884389586],
        [6132.061512231827, 7870.77699136734, 432.3740966320038, 149.6453869342804, 510.1908826828003, 410.26378202438354, 617.0219728946686]]
    row_num = len(rand_res)//2+1
    rand_sum_res = [0.0 for _ in range(len(rand_res[0]))]
    rand_sum_valid_times = [0.0 for _ in range(len(rand_res[0]))]
    rand_valid_res = [0 for _ in range(len(rand_res[0]))]
    for i in range(row_num-1):
        for j in range(len(rand_res[2*i])):
            if rand_res[2*i][j] is not no_path:
                rand_valid_res[j] += 1
                rand_sum_res[j] += rand_res[2*i][j]
                rand_sum_valid_times[j] += rand_res[2*i+1][j]
    # print(rand_valid_res)
    # print(rand_sum_res)
    # print(rand_sum_valid_times)
    rand_avg_res = [0.0 for _ in range(len(rand_res[0]))]
    rand_avg_valid_times = [0.0 for _ in range(len(rand_res[0]))]
    for i in range(len(rand_valid_res)):
        if rand_valid_res[i] is not 0:
            rand_avg_res[i] = rand_sum_res[i]/rand_valid_res[i]
            rand_avg_valid_times[i] = rand_sum_valid_times[i]/rand_valid_res[i]

    print("eps_s =", eps_s)
    print("rand_valid_res =", rand_valid_res)

    print("rand_avg_res =", rand_avg_res)
    print("eps_net_final_res =", eps_net_final_res)

    print("rand_avg_valid_times =", rand_avg_valid_times)
    print("eps_net_avg_valid_times =", eps_net_avg_valid_times)

    '''
    random final res=  [1.5109648860659861, 1.53510986849, 99999999999, 1.4066578931646943, 1.3405460963436457, 1.3270625479918727, 1.3085868710961375]
    random final times=  [78.1520254611969, 173.98906660079956, 13504.433089733124, 314.4702591896057, 209.99445986747742, 596.4837501049042, 951.3588228225708]
    random final res=  [1.5299330220973502, 99999999999, 1.4181950365901177, 1.382901860361044, 1.3651564485707, 1.3177078756750156, 1.301408146304514]
    random final times=  [117.39732384681702, 7650.561292648315, 109.63950562477112, 211.4622781276703, 883.2858321666718, 452.73159551620483, 600.5243246555328]
    random final res=  [1.6112443705426163, 1.557966901096969, 1.495311238095206, 1.4015180673818404, 1.3485819960227499, 1.318899810714964, 1.301358801319846]
    random final times=  [275.7864155769348, 311.25441241264343, 282.18838143348694, 217.95005774497986, 343.90671849250793, 544.6878755092621, 531.8176732063293]
    random final res=  [1.5105495531131852, 1.5842802911093294, 1.495701797016463, 1.4038734197896343, 1.3540559867449877, 1.3293509830022545, 1.3068640513369658]
    random final times=  [73.1277539730072, 481.17656898498535, 427.52325892448425, 210.21930646896362, 422.27677297592163, 585.321536064148, 685.4591822624207]
    random final res=  [1.6239985453055705, 1.4457205430121642, 1.4505504025318123, 1.4101244341350663, 1.3531225432236578, 1.3214490492621638, 1.3034443655988717]
    random final times=  [213.087064743042, 54.96124839782715, 238.71420907974243, 283.58644437789917, 481.2490611076355, 509.79564452171326, 891.4062440395355]
    random final res=  [1.5052843449425364, 1.5851293054657396, 1.4493382323453465, 1.398293965641256, 1.3516097976056443, 1.3187187294041172, 1.3011036472196904]
    random final times=  [109.96934247016907, 194.709951877594, 129.1239356994629, 316.4807999134064, 282.18617153167725, 435.5092260837555, 553.3152341842651]
    random final res=  [1.5350869572061288, 1.4654751684592657, 1.4412171331292, 1.4086480740330396, 1.3536452273264477, 1.3182853830091745, 1.3040946480249411]
    random final times=  [213.08398747444153, 120.25995874404907, 161.63460326194763, 287.30380511283875, 311.287100315094, 498.7778322696686, 652.6645858287811]
    random final res=  [1.6058211099462736, 1.519965501011662, 1.4689388877020753, 1.4314239822343073, 1.343856190655332, 1.3232695243691, 1.3071700824256696]
    random final times=  [294.83730697631836, 202.2020399570465, 137.633380651474, 590.7230896949768, 265.59653782844543, 373.3257348537445, 743.418178319931]
    random final res=  [1.5771350822368815, 1.532517660119105, 1.4753259261864662, 1.4300366454888005, 1.3537961735138688, 1.3260987435320608, 1.3027839001278207]
    random final times=  [239.22445964813232, 167.6970236301422, 435.5092852115631, 420.96746468544006, 508.124018907547, 813.9572095870972, 980.716011762619]
    random final res=  [99999999999, 99999999999, 1.4855823580254899, 1.3781414050977328, 1.3661087839665702, 1.3222220586761013, 1.3014991884389586]
    random final times=  [6132.061512231827, 7870.77699136734, 432.3740966320038, 149.6453869342804, 510.1908826828003, 410.26378202438354, 617.0219728946686]
    '''


def spiral_rand_vs_sg():
    eps_s = [9999999, 25, 10, 5, 2.5, 1.5, 1]
    eps_net_final_res = [7.225211037399447, 7.259783588110346, 7.231285615510996, 7.191497727661158, 7.188265871974338, 6.814532142977471, 6.784470805676023]
    eps_net_final_times = [[78.00551724433899, 88.68912196159363, 142.44079184532166, 287.18443751335144, 1204.1617059707642, 4691.591737270355, 17285.450556755066],
                           [81.401376247406, 90.33258700370789, 141.91975140571594, 286.8269898891449, 1173.6364333629608, 4696.901390552521, 17146.71230864525],
                           [81.55307722091675, 89.86700081825256, 141.25058436393738, 285.828400850296, 1174.119019985199, 4680.83646440506, 17200.691658496857]]

    eps_net_avg_valid_times = [0.0 for _ in range(len(eps_net_final_res))]
    for l in eps_net_final_times:
        for i in range(len(l)):
            eps_net_avg_valid_times[i] += l[i]/len(eps_net_final_times)

    no_path = 99999999999
    rand_res = [[99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.108012753935853, 6.936522887671751],
                [0.349029541015625, 0.33016061782836914, 0.4946727752685547, 18.539395093917847, 149.50300455093384, 4474.714858055115, 17283.443729877472],
                [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.061230447143497, 6.899820708724438],
                [1.7134251594543457, 0.3739933967590332, 0.5415511131286621, 36.83665418624878, 140.1557171344757, 4514.40425825119, 19252.27974963188],
                [99999999999, 99999999999, 99999999999, 99999999999, 7.2830205590951405, 7.125951956593724, 6.831824757856652],
                [1.3972721099853516, 0.6951389312744141, 5.9999167919158936, 5.499393939971924, 1231.9699039459229, 4463.41305232048, 17638.83198404312],
                [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.067352639548302, 6.908762349645952],
                [1.5010387897491455, 2.744612216949463, 2.1522865295410156, 6.195390462875366, 155.73568105697632, 4298.221374988556, 18358.303240299225],
                [99999999999, 99999999999, 99999999999, 7.911714268372185, 7.545308270153963, 7.096059382445007, 6.876388089200832],
                [0.37699222564697266, 0.3919496536254883, 0.532576322555542, 345.5188729763031, 1119.0087716579437, 4353.6191556453705, 18553.99246573448],
                [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.002002606428896, 6.871780116665077],
                [0.3749525547027588, 1.71042799949646, 0.45482635498046875, 82.51601910591125, 154.96291947364807, 4323.095559835434, 17462.266608715057],
                [99999999999, 99999999999, 99999999999, 99999999999, 7.608486560917111, 7.0856062356051535, 6.8526042650176064],
                [0.9265193939208984, 0.7998168468475342, 4.807149171829224, 33.04965853691101, 1123.9446015357971, 4291.557550668716, 17226.899027585983],
                [99999999999, 99999999999, 99999999999, 99999999999, 7.425152387289698, 7.064306047147723, 6.882210306080315],
                [1.809159755706787, 1.490015983581543, 1.2247235774993896, 78.76807451248169, 1233.48965382576, 4287.393750905991, 18161.36843919754],
                [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.136182091424035, 6.827843041440005],
                [3.156559467315674, 1.663506031036377, 1.3723318576812744, 17.35969114303589, 294.8353931903839, 4186.65851020813, 17355.322334051132],
                [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.081513403571281, 6.858197942536364],
                [0.3570094108581543, 2.112399101257324, 1.7113773822784424, 8.178179264068604, 174.65819144248962, 4286.753072500229, 17804.803035974503]]
    row_num = len(rand_res)//2+1
    rand_sum_res = [0.0 for _ in range(len(rand_res[0]))]
    rand_sum_valid_times = [0.0 for _ in range(len(rand_res[0]))]
    rand_valid_res = [0 for _ in range(len(rand_res[0]))]
    for i in range(row_num-1):
        for j in range(len(rand_res[2*i])):
            if rand_res[2*i][j] is not no_path:
                rand_valid_res[j] += 1
                rand_sum_res[j] += rand_res[2*i][j]
                rand_sum_valid_times[j] += rand_res[2*i+1][j]
    # print(rand_valid_res)
    # print(rand_sum_res)
    # print(rand_sum_valid_times)
    rand_avg_res = [0.0 for _ in range(len(rand_res[0]))]
    rand_avg_valid_times = [0.0 for _ in range(len(rand_res[0]))]
    for i in range(len(rand_valid_res)):
        if rand_valid_res[i] is not 0:
            rand_avg_res[i] = rand_sum_res[i]/rand_valid_res[i]
            rand_avg_valid_times[i] = rand_sum_valid_times[i]/rand_valid_res[i]

    print("eps_s =", eps_s)
    print("rand_valid_res =", rand_valid_res)

    print("rand_avg_res =", rand_avg_res)
    print("eps_net_final_res =", eps_net_final_res)

    print("rand_avg_valid_times =", rand_avg_valid_times)
    print("eps_net_avg_valid_times =", eps_net_avg_valid_times)

    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.108012753935853, 6.936522887671751]
    # random final times=  [0.349029541015625, 0.33016061782836914, 0.4946727752685547, 18.539395093917847, 149.50300455093384, 4474.714858055115, 17283.443729877472]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.061230447143497, 6.899820708724438]
    # random final times=  [1.7134251594543457, 0.3739933967590332, 0.5415511131286621, 36.83665418624878, 140.1557171344757, 4514.40425825119, 19252.27974963188]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 7.2830205590951405, 7.125951956593724, 6.831824757856652]
    # random final times=  [1.3972721099853516, 0.6951389312744141, 5.9999167919158936, 5.499393939971924, 1231.9699039459229, 4463.41305232048, 17638.83198404312]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.067352639548302, 6.908762349645952]
    # random final times=  [1.5010387897491455, 2.744612216949463, 2.1522865295410156, 6.195390462875366, 155.73568105697632, 4298.221374988556, 18358.303240299225]
    # random final res=  [99999999999, 99999999999, 99999999999, 7.911714268372185, 7.545308270153963, 7.096059382445007, 6.876388089200832]
    # random final times=  [0.37699222564697266, 0.3919496536254883, 0.532576322555542, 345.5188729763031, 1119.0087716579437, 4353.6191556453705, 18553.99246573448]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.002002606428896, 6.871780116665077]
    # random final times=  [0.3749525547027588, 1.71042799949646, 0.45482635498046875, 82.51601910591125, 154.96291947364807, 4323.095559835434, 17462.266608715057]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 7.608486560917111, 7.0856062356051535, 6.8526042650176064]
    # random final times=  [0.9265193939208984, 0.7998168468475342, 4.807149171829224, 33.04965853691101, 1123.9446015357971, 4291.557550668716, 17226.899027585983]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 7.425152387289698, 7.064306047147723, 6.882210306080315]
    # random final times=  [1.809159755706787, 1.490015983581543, 1.2247235774993896, 78.76807451248169, 1233.48965382576, 4287.393750905991, 18161.36843919754]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.136182091424035, 6.827843041440005]
    # random final times=  [3.156559467315674, 1.663506031036377, 1.3723318576812744, 17.35969114303589, 294.8353931903839, 4186.65851020813, 17355.322334051132]
    # random final res=  [99999999999, 99999999999, 99999999999, 99999999999, 99999999999, 7.081513403571281, 6.858197942536364]
    # random final times=  [0.3570094108581543, 2.112399101257324, 1.7113773822784424, 8.178179264068604, 174.65819144248962, 4286.753072500229, 17804.803035974503]


def rand_vs_sg_figs():
    eps_s = ["$\\infty$", "25", "10", "5", "2.5", "1.5", "1"]
    spiral_rand_valid_res = [0, 0, 0, 0.1, 0.4, 1.0, 1.0]
    opt_rand_valid_res = [0.9, 0.8, 0.9, 1.0, 1.0, 1.0, 1.0]

    plt.plot(eps_s, opt_rand_valid_res, "g.", label="2-robots: obstacle-free", linestyle="solid")
    plt.plot(eps_s, spiral_rand_valid_res, "m.", label="2-robots: spiral", linestyle="solid")

    plt.xlabel("Approximation parameter $\\varepsilon$")
    plt.ylabel("Success rate")
    plt.title("Success rate using random sampling")
    plt.legend()
    plt.savefig("rnd_vs_sg_success_rate.png")
    plt.clf()

    spiral_rand_avg_res = [0.0, 0.0, 0.0, 7.911714268372185, 7.465491944363977, 7.082821756384346, 6.8745954464839]
    spiral_eps_net_final_res = [7.225211037399447, 7.259783588110346, 7.231285615510996, 7.191497727661158, 7.188265871974338, 6.814532142977471, 6.784470805676023]
    spiral_cost = []
    for i in range(len(spiral_rand_avg_res)):
        spiral_cost.append(spiral_rand_avg_res[i]/spiral_eps_net_final_res[i])

    opt_rand_avg_res = [1.556668652384059, 1.5282706548455294, 1.4644623346246861, 1.4051619747327415, 1.3530479243973603, 1.3223064705636822, 1.3038313701893416]
    opt_eps_net_final_res = [1.3742365549272302, 1.373279226253925, 1.3721165441830794, 1.3674488423712654, 1.3633612251566565, 1.3017236723780092, 1.30034735466921]
    # opt_cost = []
    # for i in range(len(opt_rand_avg_res)):
    #     opt_cost.append(opt_rand_avg_res[i]/opt_eps_net_final_res[i])
    #
    # plt.plot(eps_s, opt_cost, "g.", label="2-robots: obstacle-free", linestyle="solid")
    # plt.plot(eps_s[3:], spiral_cost[3:], "m.", label="2-robots: spiral", linestyle="solid")
    # plt.axhline(y=1, color="k", linewidth=0.6, linestyle="--", label="Equal")
    #
    # plt.xlabel("$\\varepsilon$")
    # plt.ylabel("cost(random sampling)/cost(staggered grid)")
    # plt.title("Average cost of successful runs using random sampling \ncompared with the cost using the staggered grid")
    # plt.legend()
    # plt.savefig("rnd_vs_sg_cost.png")
    # plt.clf()

    # plt.plot(eps_s, spiral_eps_net_avg_valid_times, "g.", label="2-robots: obstacle-free", linestyle="solid")
    # plt.plot(eps_s[3:], spiral_rand_avg_valid_times[3:], "m.", label="2-robots: spiral", linestyle="solid")
    # plt.savefig("rnd_vs_sg_times_spiral.png")
    # plt.clf()

    plt.plot(eps_s, opt_rand_avg_res, "b.", label="random sampling", linestyle="solid")
    plt.plot(eps_s, opt_eps_net_final_res, "r.", label="staggered grid", linestyle="solid")
    plt.xlabel("Approximation parameter $\\varepsilon$")
    plt.ylabel("Solution cost")
    # plt.title("Average cost of successful runs using random sampling compared \nwith the cost using the staggered grid for the obstacle-free scene")
    plt.legend()
    plt.savefig("rnd_vs_sg_costs_opt.png")
    plt.clf()

    plt.plot(eps_s, spiral_eps_net_final_res, "r.", label="staggered grid", linestyle="solid")
    plt.plot(eps_s[3:], spiral_rand_avg_res[3:], "b.", label="random sampling", linestyle="solid")
    plt.xlabel("Approximation parameter $\\varepsilon$")
    plt.ylabel("Solution cost")
    # plt.title("Average cost of successful runs using random sampling compared \nwith the cost using the staggered grid for the spiral scene")
    plt.legend()
    plt.savefig("rnd_vs_sg_costs_spiral.png")
    plt.clf()


if __name__ == "__main__":
    # eps_s = ["$\\infty$", "25", "10", "5", "3", "2.7", "2.5", "2", "1.9", "1.8", "1.7", "1.5", "1.3", "1.2", "1"]
    # times_not_shifted = [62.76637029647827, 87.62836837768555, 123.72280311584473, 217.94697213172913, 430.56999707221985,
    #          506.05531907081604, 652.41943192482, 1331.0657453536987, 1501.7965757846832, 1413.9877769947052,
    #          148.2530117034912, 170.5772032737732, 230.12888193130493, 293.20365953445435, 657.0379984378815]
    # times_shifted = [59.81222200393677, 90.5360701084137, 125.10961627960205, 220.47307109832764, 440.3311188220978,
    #          515.9197416305542, 651.3253591060638, 1351.9044961929321, 1551.1296701431274, 1423.5932638645172,
    #          164.0403208732605, 175.94597864151, 235.04816436767578, 299.7134027481079, 663.4945273399353]
    #
    # plt.plot(eps_s, times_shifted, "r.", label="shifted", linestyle="solid")
    # plt.plot(eps_s, times_not_shifted, "g.", label="regular", linestyle="solid")
    # plt.legend()
    # plt.savefig("fig.png")
    # plt.clf()

    # print(colored("spiral_rand_vs_sg", "red"))
    # spiral_rand_vs_sg()
    # print(colored("opt_rand_vs_sg", "red"))
    # opt_rand_vs_sg()
    rand_vs_sg_figs()
    # exit()
    create_fig()
    exit()
    # with open("warehouse_2_d004_multi_100000_0.04_eps_net.ymal") as file:
    #     # The FullLoader parameter handles the conversion from YAML
    #     # scalar values to Python the dictionary format
    #     fruits_list = yaml.load(file, Loader=yaml.FullLoader)
    #     print("123")
    #
    # alpha = eps/math.sqrt(1+eps**2)
    # edge_len = 1-2*delta
    # ball_radius = alpha*delta
    # beta = ball_radius
    # unrounded_balls_per_dim = edge_len/(2*ball_radius)
    # print("unrounded number of balls:", unrounded_balls_per_dim**2+(unrounded_balls_per_dim+1)**2)
    # balls_per_dim = math.ceil(unrounded_balls_per_dim)
    # print("real number of balls:", balls_per_dim**2+(balls_per_dim+1)**2)
    # # This is like w but normalized to full balls
    # half_points_diff = (edge_len/balls_per_dim)/2
    # l1_cords = [delta+(2*i-1)*half_points_diff for i in range(1, balls_per_dim + 1)]
    # l2_cords = [delta+(2*i)*half_points_diff for i in range(balls_per_dim + 1)]
    # l1 = cords_to_2d_points(l1_cords, l1_cords)
    # l2 = cords_to_2d_points(l2_cords, l2_cords)
    # print("l1:", l1)
    # print("l2:", l2)
    # print("balls in each layer", len(l1), len(l2))
